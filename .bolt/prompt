You must follow these strict rules to ensure there are NEVER any TypeScript errors, and that Netlify deployments NEVER fail.

1. All code must compile successfully using:
   - `tsc --noEmit`
   - `npm run build` (or `vite build` / `next build` depending on project)

2. No `any`, `unknown`, or implicit `any` types allowed unless casted intentionally and documented.

3. If a component uses props:
   - Always define and export a clear interface for its props.
   - Example:
     interface ButtonProps {
       label: string;
       onClick: () => void;
     }

4. All components must be typed with `React.FC<Props>` or `FC<Props>`:
   - Example:
     const Button: React.FC<ButtonProps> = ({ label }) => { ... }

5. Never leave unused variables, unused imports, or undeclared values.
   - Use `eslint` rules like `noUnusedLocals` and `noImplicitReturns`.

6. Always match database field names with correct casing:
   - Supabase often uses `snake_case`, while TS interfaces use `camelCase`.
   - Use conversion or mapping as needed (e.g., `updated_at â†’ updatedAt`).

7. If using Framer Motion, never apply `MotionStyle` to regular HTML elements.
   - Only apply to `<motion.div>` or equivalent.
   - Use type-safe animation props like `animate`, `initial`, and `exit`.

8. If using Supabase, all client calls must be typed.
   - Use generated types or define types for responses.
   - Example:
     const { data, error } = await supabase.from<MyTable>('my_table').select()

9. Final code must pass:
   - `tsc`
   - `npm run lint`
   - `npm run build` on Netlify without errors or warnings

10. If unsure of a type, use a generic placeholder and flag it in a `TODO` comment.
    - Never assume types or skip typing silently.

DO NOT guess or shortcut typings. Write clean, safe, future-proof code. Fail early in dev, not at deploy.